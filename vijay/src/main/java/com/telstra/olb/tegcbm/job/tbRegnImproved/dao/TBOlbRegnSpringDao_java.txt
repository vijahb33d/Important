/*
 * Created on Aug 17, 2011
 *
 * TODO To change the template for this generated file go to
 * Window - Preferences - Java - Code Style - Code Templates
 */
package com.telstra.olb.tegcbm.job.tbRegnImproved.dao;

import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.jdbc.core.BatchPreparedStatementSetter;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.support.JdbcDaoSupport;


import com.telstra.olb.tegcbm.job.core.ActivityException;
import com.telstra.olb.tegcbm.job.tbRegnImproved.TBRegistrationEventNotification;
import com.telstra.olb.tegcbm.job.tbRegnImproved.TBRegnException;

/**
 * @author vijay.ganesh.s
 *
 * TODO To change the template for this generated type comment go to
 * Window - Preferences - Java - Code Style - Code Templates
 */
public class TBOlbRegnSpringDao extends JdbcDaoSupport {
	
	private static Log log = LogFactory.getLog(TBOlbRegnSpringDao.class);
	private final String CONST_IMMEDIATE = "IMMEDIATE";
	private final String CONST_AFTER_X_DAYS = "AFTER-X-DAYS";
	private final String CONST_FUTUREDATE = "FUTURE-DATE";
	private final String REGN_X_DAYS = "REGN-X-DAYS";
	private final String EMAIL_ADDRESSES = "EMAIL_ADDRESS";
	String INSERT_SQL_REGISTRATION = "INSERT INTO EDX_DBA.OLB_TB_REGISTRATION(ACCOUNT_NO,CIDN_NO,CREATED_DATE,PREFERENCE) VALUES(?,?,?,?)";
	String DELETE_SQL_REGISTRATION = "DELETE FROM EDX_DBA.OLB_TB_REGISTRATION WHERE ACCOUNT_NO=? AND CIDN_NO=?";
	String INSERT_ARCHIVE_SQL_REGISTRATION = "INSERT INTO EDX_DBA.OLB_TB_REGN_ARCHIVE(ACCOUNT_NO,CIDN_NO,CREATED_DATE,ENROL_DATE,PREFERENCE,PAPER_STATUS_DATE) VALUES(?,?,?,?,?,?)";
	String UPDATE_ENROLDATE_SQL = "UPDATE EDX_DBA.OLB_TB_REGISTRATION SET ENROL_DATE=?,PAPER_STATUS_DATE=? WHERE ACCOUNT_NO=? AND CIDN_NO=?";
	String SELECT_PAPER_STATUS_DATA_SQL = "SELECT ACCOUNT_NO,CIDN_NO,CREATED_DATE,PREFERENCE FROM EDX_DBA.OLB_TB_REGISTRATION WHERE ENROL_DATE IS NULL";
	String SELECT_BUFFER_STATUS_DATA_SQL = "SELECT ACCOUNT_NO,CIDN_NO,PREFERENCE,PAPER_STATUS_DATE FROM EDX_DBA.OLB_TB_REGISTRATION WHERE PAPER_STATUS_DATE=TO_CHAR(SYSDATE,'DD-MON-YY')";
	String SELECT_ACCOUNT_CIDN_DATA_SQL = "select ACCOUNT_NO,CIDN_NO,CREATED_DATE,ENROL_DATE,PAPER_STATUS_DATE,PREFERENCE from olb_tb_registration a,olb_tb_regn_params b where b.attribute_id='REGN-X-DAYS' and (a.created_date+b.attribute_value) = TO_CHAR(SYSDATE,'DD-MON-RR')";
	String SELECT_EXIST_ACCOUNTNO_DATA_SQL = "UPDATE EDX_DBA.OLB_TB_REGISTRATION SET CREATED_DATE=? WHERE ACCOUNT_NO=? AND CIDN_NO=?";
	
	
			
    /**
     * This method is responsible for inserting the Registration data in the EDX table EDX_DBA.OLB_TB_REGISTRATION.
     * 
     * @param tbuRegList
     */
	public void storeData(final List tbuRegList) throws TBRegnException {
		try {
			if (log.isDebugEnabled()) { log.debug("Inserting Regn Records in TBOlbRegnSpringDao");}
			getJdbcTemplate().batchUpdate(INSERT_SQL_REGISTRATION, new BatchPreparedStatementSetter() {	
				public void setValues(PreparedStatement insertStat, int index) throws SQLException {
					TBRegistrationEventNotification tbRegEvent = (TBRegistrationEventNotification) tbuRegList.get(index);
					insertStat.setString(1,tbRegEvent.getAccountNumber());
					insertStat.setString(2,tbRegEvent.getCustomerId());
					insertStat.setDate(3,tbRegEvent.getCreatedDate());
					insertStat.setString(4,tbRegEvent.getPreference());
				}
				
				public int getBatchSize() {
					return tbuRegList.size();
				}
			});
		}
		catch(Exception e) {
			throw new TBRegnException(e.fillInStackTrace());
		}
	}
    
    /**
     * This method is responsible for Updating the Registration data in the EDX table EDX_DBA.OLB_TB_REGISTRATION.
     * 
     * @param tbuRegList
     */
    public void updateEnrolData(final List tbuRegList) {
        if (log.isDebugEnabled()) { log.debug("Updating the Paper Status Date in TBOlbRegnSpringDao");}
        getJdbcTemplate().batchUpdate(UPDATE_ENROLDATE_SQL, new BatchPreparedStatementSetter() {	
			public void setValues(PreparedStatement insertStat, int index) throws SQLException {
				TBRegistrationEventNotification tbRegEvent = (TBRegistrationEventNotification) tbuRegList.get(index);
                insertStat.setDate(1, tbRegEvent.getEnrolDate());
                insertStat.setDate(2, tbRegEvent.getPaperStatusDate());
                insertStat.setString(3, tbRegEvent.getAccountNumber());
                insertStat.setString(4, tbRegEvent.getCustomerId());
			}

			public int getBatchSize() {
				return tbuRegList.size();
			}
		});
    }

    /**
     * This method is responsible for SELECTING the account compnay map to update the enrol_date in the EDX table EDX_DBA.OLB_TB_REGISTRATION.
     * 
     * @param tbuRegList
     */
    public boolean checkEnrolmentDone(final String accNo) {
    	boolean accountEnrolled = false;
    	String SELECT_COMPANYMAP_SQL = "SELECT ACCOUNT_NUMBER FROM EDX_DBA.OLB_ACCOUNT_COMPANY_MAP WHERE ACCOUNT_NUMBER='"+accNo+"'";
    	List accountMap = null;
        if (log.isDebugEnabled()) { log.debug("Checking whether the Enrolment is Done or not");}
        accountMap = (List) getJdbcTemplate().query(SELECT_COMPANYMAP_SQL, new RowMapper() {
            public Object mapRow(ResultSet rs, int rowNum) throws SQLException {
                String accountNumber = rs.getString(1);
                return accountNumber;
            }
        });
        if(accountMap.size() > 0) {
        	String accountNum = (String) accountMap.get(0);
        	if(accountNum.equals(accNo)) {
        		accountEnrolled = true;
        	} else {
        		accountEnrolled = false;
        	}
        }
        return accountEnrolled;
    }
    
    /**
     * This method is responsible for SELECTING the account compnay map to update the enrol_date in the EDX table EDX_DBA.OLB_TB_REGISTRATION.
     * 
     * @param tbuRegList
     */
    public List paperStatusData() {
    	List accountMap = null;
        if (log.isDebugEnabled()) { log.debug("Selecting the Paper Status Data in TBOlbRegnSpringDao");}
        accountMap = (List) getJdbcTemplate().query(SELECT_PAPER_STATUS_DATA_SQL, new RowMapper() {
            public Object mapRow(ResultSet rs, int rowNum) throws SQLException {
            	TBRegistrationEventNotification tbReg = new TBRegistrationEventNotification();
            	tbReg.setAccountNumber(rs.getString(1));
                tbReg.setCustomerId(rs.getString(2));
                tbReg.setCreatedDate(rs.getDate(3));
                tbReg.setPreference(rs.getString(4));
                return tbReg;
            }
        });
        log.debug("The Entire List is "+accountMap);
        return accountMap;
    }
    
    /**
     * This method is responsible for SELECTING the input attribute to update the paperStatusDate.
     * 
     * @param attributeId
     */
    public String paperInputData() {
    	String attributeId = new String(); 
    	StringBuffer INPUT_PARAMS_SQL = new StringBuffer();
        if (log.isDebugEnabled()) { log.debug("Selecting the Paper Status Data in TBOlbRegnSpringDao");}
        String INPUT_PREFEREENCES_SQL = "SELECT ATTRIBUTE_ID FROM EDX_DBA.OLB_TB_REGN_INPUT";        
        List inputMap = (List) getJdbcTemplate().query(INPUT_PREFEREENCES_SQL.toString(), new RowMapper() {
            public Object mapRow(ResultSet rs, int rowNum) throws SQLException {
            	String attrId = rs.getString(1);
                return attrId;
            }
        });
        if(inputMap.size() > 0) {
        	attributeId = (String) inputMap.get(0);
        }
        return attributeId;
    }
    
    /**
     * This method is responsible for SELECTING the input attribute to update the paperStatusDate.
     * 
     * @param attributeId
     * @throws ActivityException
     */
    public Calendar paramValueData() throws ActivityException {
    	String attributeValue = new String(); 
    	String attributeId = paperInputData();
    	Calendar paramCalc = Calendar.getInstance();
    	StringBuffer INPUT_PARAMS_SQL = new StringBuffer();
        if (log.isDebugEnabled()) { log.debug("Selecting the Paper Status Data in TBOlbRegnSpringDao");}
        INPUT_PARAMS_SQL = new StringBuffer("SELECT ATTRIBUTE_VALUE FROM EDX_DBA.OLB_TB_REGN_PARAMS WHERE ATTRIBUTE_ID='");
        if(attributeId != null) {
        	INPUT_PARAMS_SQL.append(attributeId);
        }
        INPUT_PARAMS_SQL.append("'");        
        List inputMap = (List) getJdbcTemplate().query(INPUT_PARAMS_SQL.toString(), new RowMapper() {
            public Object mapRow(ResultSet rs, int rowNum) throws SQLException {
            	String attrId = rs.getString(1);
                return attrId;
            }
        });
        if(inputMap.size() > 0 && attributeId.equalsIgnoreCase(CONST_IMMEDIATE)) {
        	log.debug("Inside the 1st Param Attribute");
        	attributeValue = (String) inputMap.get(0);
        	try {
        		paramCalc.add(Calendar.DATE,Integer.parseInt(attributeValue));
        	} catch(NumberFormatException e) {
        		log.error("!!!!!!!!!!! The Param Attribute Value is invalid !!!!!!!!!!!"+e.fillInStackTrace());
        		paramCalc = null;
        	}
        } else if (inputMap.size() > 0 && attributeId.equalsIgnoreCase(CONST_AFTER_X_DAYS)) {
        	log.debug("Inside the 2nd Param Attribute");
        	attributeValue = (String) inputMap.get(0);
        	try {
        		paramCalc.add(Calendar.DATE,Integer.parseInt(attributeValue));
        	} catch(NumberFormatException e) {
        		log.error("!!!!!!!!!!! The Param Attribute Value is invalid !!!!!!!!!!!"+e.fillInStackTrace());
        		paramCalc = null;
        	}        	
        } else if (inputMap.size() > 0 && attributeId.equalsIgnoreCase(CONST_FUTUREDATE)) {
        	log.debug("Inside the 3rd Param Attribute");
        	attributeValue = (String) inputMap.get(0);
        	if(attributeValue.length() == 8) {
    			SimpleDateFormat simpleDtFor = new SimpleDateFormat("yyyyMMdd");
    			try {				
    				paramCalc.setTime(simpleDtFor.parse(attributeValue));
    			} catch (ParseException e) {
    				log.error("Inside Dao while Parsing the DateObject "+e.fillInStackTrace());
    				throw new ActivityException(e.getMessage());
    			}
        	}
        }
        return paramCalc;
    }
    
    /**
     * This method is responsible for SELECTING the account type from PDB_ACCOUNT_VALUES_T to create Buffer Request for Paper Off.
     * 
     * @param tbuRegList
     */
    public List getAccountData(final String accountNumber) {
    	List valueMap = null;
        if (log.isDebugEnabled()) { log.debug("Selecting the Account Data in TBOlbRegnSpringDao");}
        String INPUT_PREFEREENCES_SQL = "SELECT VALUE FROM PDB_DBA.PDB_ACCOUNT_VALUES_T WHERE ATTRIBUTE_ID='type' and ACCOUNT_NUMBER='"+accountNumber+"'";        
        valueMap = (List) getJdbcTemplate().query(INPUT_PREFEREENCES_SQL.toString(), new RowMapper() {
        	public Object mapRow(ResultSet rs, int rowNum) throws SQLException {
            	String accountType = rs.getString(1);
                return accountType;
            }
        });
        return valueMap;
    }
    
    /**
     * This method is responsible for SELECTING the account type from PDB_ACCOUNT_VALUES_T to create Buffer Request for Paper Off.
     * 
     * @param tbuRegList
     */
    public List getAllAccountData(final String cidn) {
    	List valueMap = null;
        if (log.isDebugEnabled()) { log.debug("Selecting the All Account Data in TBOlbRegnSpringDao");}
        String INPUT_PREFEREENCES_SQL = "SELECT ACCOUNT_NUMBER,VALUE FROM PDB_DBA.PDB_ACCOUNT_VALUES_T WHERE ATTRIBUTE_ID='type' and CIDN='"+cidn+"'";        
        valueMap = (List) getJdbcTemplate().query(INPUT_PREFEREENCES_SQL.toString(), new RowMapper() {
            public Object mapRow(ResultSet rs, int rowNum) throws SQLException {
            	String accountNumber = rs.getString(1);
            	String accountType = rs.getString(2);            	
                return (accountNumber+","+accountType);
            }
        });
        return valueMap;
    }
    
    /**
     * This method is responsible for SELECTING the accounts for which the Paper Status Date is Current Date.
     * 
     * @param tbuRegList
     */
    public List processBufferData() {
    	List accountMap = null;
        if (log.isDebugEnabled()) { log.debug("Selecting the Paper Status Date equals current date in TBOlbRegnSpringDao");}
        accountMap = (List) getJdbcTemplate().query(SELECT_BUFFER_STATUS_DATA_SQL, new RowMapper() {
            public Object mapRow(ResultSet rs, int rowNum) throws SQLException {
            	TBRegistrationEventNotification tbReg = new TBRegistrationEventNotification();
            	tbReg.setAccountNumber(rs.getString(1));
                tbReg.setCustomerId(rs.getString(2));
                tbReg.setPreference(rs.getString(3));
                tbReg.setPaperStatusDate(rs.getDate(4));
                return tbReg;
            }
        });
        return accountMap;
    }
    /**
     * This method is responsible for SELECTING the Email address from  EDX table EDX_DBA.OLB_TB_REGN_PARAMS.
     * 
     * 
     */
    public List getEmailAddress() {
        if (log.isDebugEnabled()) { log.debug("Selecting the Email addressses");}
        String SQL = "SELECT ATTRIBUTE_VALUE FROM EDX_DBA.OLB_TB_REGN_PARAMS WHERE ATTRIBUTE_ID='"+EMAIL_ADDRESSES+"'";  
        log.debug("Query= "+SQL);
        List inputMap = (List) getJdbcTemplate().query(SQL.toString(), new RowMapper() {
            public Object mapRow(ResultSet rs, int rowNum) throws SQLException {
            	String attributeId = rs.getString(1);
                return attributeId;
            }
        });
        log.debug("EMAIL_ADDRESS Value is "+inputMap);
        return inputMap;
    }
    /**
     * This method is responsible for retrieve the account details from  EDX table EDX_DBA.OLB_TB_REGISTRATION.
     * 
     * 
     */
    public List regAccountsData() throws TBRegnException {
    	List accountMap = null;
    	try {
            if (log.isDebugEnabled()) { log.debug("Selecting the Accounts data in TBOlbRegnSpringDao");}
            accountMap = (List) getJdbcTemplate().query(SELECT_ACCOUNT_CIDN_DATA_SQL, new RowMapper() {
                public Object mapRow(ResultSet rs, int rowNum) throws SQLException {
                	TBRegistrationEventNotification tbReg = new TBRegistrationEventNotification();
                	tbReg.setAccountNumber(rs.getString(1));
                    tbReg.setCustomerId(rs.getString(2));
                    tbReg.setCreatedDate(rs.getDate(3));
                    tbReg.setEnrolDate(rs.getDate(4));
                    tbReg.setPaperStatusDate(rs.getDate(5));
                    tbReg.setPreference(rs.getString(6));
                    return tbReg;
                }
            });
            log.debug("The Entire List is "+accountMap);
    	} catch(Exception e) {
    		throw new TBRegnException(e.fillInStackTrace());
    	}
        return accountMap;
    }
    /**
     * This method is responsible for SELECTING the EREGN-X-DAYS from  EDX table EDX_DBA.OLB_TB_REGN_PARAMS.
     * 
     * 
     */
    public List getRegnDays() {
        if (log.isDebugEnabled()) { log.debug("Selecting the REGN-X-DAYS");}
        String SQL = "SELECT ATTRIBUTE_VALUE FROM EDX_DBA.OLB_TB_REGN_PARAMS WHERE ATTRIBUTE_ID='"+REGN_X_DAYS+"'";  
        log.debug("REGN-X-DAYS Query= "+SQL);
        List inputMap = (List) getJdbcTemplate().query(SQL.toString(), new RowMapper() {
            public Object mapRow(ResultSet rs, int rowNum) throws SQLException {
            	String attributeId = rs.getString(1);
                return attributeId;
            }
        });
        log.debug("REGN-X-DAYS Value is "+inputMap);
        return inputMap;
    }
    
    /**
     * This method is responsible for inserting the Registration data in the EDX table EDX_DBA.OLB_TB_REGISTRATION.
     * 
     * @param tbuRegList
     */
	public void purgeData(final List tbuRegList){
		if (log.isDebugEnabled()) { log.debug("Inserting Regn Records in TBOlbRegnSpringDao");}
		getJdbcTemplate().batchUpdate(INSERT_ARCHIVE_SQL_REGISTRATION, new BatchPreparedStatementSetter() {	
			public void setValues(PreparedStatement insertStat, int index) throws SQLException {
				TBRegistrationEventNotification tbRegEvent = (TBRegistrationEventNotification) tbuRegList.get(index);
				insertStat.setString(1,tbRegEvent.getAccountNumber());
				insertStat.setString(2,tbRegEvent.getCustomerId());
				insertStat.setDate(3,tbRegEvent.getCreatedDate());
				insertStat.setDate(4,tbRegEvent.getEnrolDate());
				insertStat.setString(5,tbRegEvent.getPreference());
				insertStat.setDate(6,tbRegEvent.getPaperStatusDate());
			}
			
			public int getBatchSize() {
				return tbuRegList.size();
			}
		});
		deleteRegn(tbuRegList);
	}
	
    /**
     * This method will delete the successfully Archived Data from OLB_TB_REGISTRATION to OLB_TB_REGN_ARCHIVE. 
     * 
     * @param tbEventList
     */
    public void deleteRegn(final List tbEventList){
        if (log.isDebugEnabled()) { log.debug("Removing account company record");}
    	getJdbcTemplate().batchUpdate(DELETE_SQL_REGISTRATION, new BatchPreparedStatementSetter() {

			public void setValues(PreparedStatement deleteStat, int index) throws SQLException {
				TBRegistrationEventNotification accountCompany = 
                	(TBRegistrationEventNotification) tbEventList.get(index);
                deleteStat.setString(1, accountCompany.getAccountNumber());
                deleteStat.setString(2, accountCompany.getCustomerId());
			}

			public int getBatchSize() {
				return tbEventList.size();
			}
		});
    }
    /**
     * This method will update creation date if already exist in input file abd Archived Data from OLB_TB_REGISTRATION to OLB_TB_REGN_ARCHIVE. 
     * 
     * @param tbEventList
     */
  
    public void updateExistAccountData(final List tbuRegList) {
        if (log.isDebugEnabled()) { log.debug("Updating the created Date for existing account numbers");}
        getJdbcTemplate().batchUpdate(SELECT_EXIST_ACCOUNTNO_DATA_SQL, new BatchPreparedStatementSetter() {	
			public void setValues(PreparedStatement updateStmt, int index) throws SQLException {
				TBRegistrationEventNotification tbRegEvent = (TBRegistrationEventNotification) tbuRegList.get(index);
				updateStmt.setDate(1, tbRegEvent.getCreatedDate());
				updateStmt.setString(2, tbRegEvent.getAccountNumber());
				updateStmt.setString(3, tbRegEvent.getCustomerId());
			}

			public int getBatchSize() {
				return tbuRegList.size();
			}
		});
    }
    
    /**
     * This method is check whether the data is already there in the EDX table EDX_DBA.OLB_TB_REGISTRATION.
     * 
     * @param tbuRegList
     */
    public boolean checkAccountExist(final String accNum, final String cidn ) {
    	boolean isExist = false;
    	List accountMap = null;
    	String SELECT_SQL_REGISTRATION = "SELECT ACCOUNT_NO,CIDN_NO,CREATED_DATE,PREFERENCE FROM EDX_DBA.OLB_TB_REGISTRATION WHERE ACCOUNT_NO='"+accNum+"' AND CIDN_NO='"+cidn+"'";
    	if (log.isDebugEnabled()) { log.debug("Selecting the Check Account List in TBOlbRegnSpringDao "+SELECT_SQL_REGISTRATION);}
        accountMap = (List) getJdbcTemplate().query(SELECT_SQL_REGISTRATION, new RowMapper() {
            public Object mapRow(ResultSet rs, int rowNum) throws SQLException {
            	TBRegistrationEventNotification tbReg = new TBRegistrationEventNotification();
            	tbReg.setAccountNumber(rs.getString(1));
                tbReg.setCustomerId(rs.getString(2));
                tbReg.setCreatedDate(rs.getDate(3));
                tbReg.setPreference(rs.getString(4));
                return tbReg;
            }
        });
        log.debug("The Check Account List is "+accountMap);
        if(accountMap.size() > 0) {
        	isExist = true;
        }
        return isExist;
    }
    
}
