/*
 * Created on Aug 19, 2011
 *
 * TODO To change the template for this generated file go to
 * Window - Preferences - Java - Code Style - Code Templates
 */
package com.telstra.olb.tegcbm.job.tbRegnImproved.generator;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.csvreader.CsvWriter;
import com.telstra.olb.tegcbm.job.core.ActivityException;
import com.telstra.olb.tegcbm.job.tbRegnImproved.TBRegistrationEventNotification;


/**
 * @author ramesh.babu.athota
 *
 * TODO To change the template for this generated type comment go to
 * Window - Preferences - Java - Code Style - Code Templates
 */
public class CSVReportGenerator {
	
	private final Log log = LogFactory.getLog(getClass());
	
	public List[] generateCSVReport(List tbAccountList,String csvFilePath,String regnDays)throws ActivityException{
		List[] totalDataList = new ArrayList[2];
		List successList = new ArrayList();
		List failureList = new ArrayList();
		try
		{
			String currDt=convertToDateFormat();
			String outputFile = csvFilePath+currDt+"_TB_REG_REPORT.csv";
			File f = new File(csvFilePath);
			String status=null;
		    boolean alreadyExists = new File(outputFile).exists();
		    if(alreadyExists) {
		    	new File(outputFile).delete();
		    	log.debug("Existing file should be deleted before writing new data");
		    }
		    if(!f.isDirectory()) 
		    {
		    	log.error("Path does not exist please create correct path");
		    	throw new ActivityException();
		    }
		    log.debug(" Before writing to CSV ");
	    	CsvWriter csvOutput = new CsvWriter(new FileWriter(outputFile, true), ',');
	    	csvOutput.write("START");
	    	csvOutput.endRecord();
	    	for (int i=0 ; i < tbAccountList.size() ; i++) {
	    		TBRegistrationEventNotification tbEventNotification = (TBRegistrationEventNotification) tbAccountList.get(i);
	    		status=getDateDiff(tbEventNotification,regnDays);
	    		tbEventNotification.setReportStatus(status);
	    		if(StringUtils.isNotEmpty(status) || StringUtils.isNotBlank(status) || status!=null) {
					csvOutput.write(tbEventNotification.getCustomerId());
					csvOutput.write(tbEventNotification.getAccountNumber());
					String date=convertToDateFormat(tbEventNotification.getCreatedDate());
					csvOutput.write(date);
					csvOutput.write(status);
					csvOutput.endRecord();
					if(status.equals("Success")) {
						successList.add(tbEventNotification);
					} else {
						failureList.add(tbEventNotification);
					}					
	    		} else {
	    			continue;
	    		}
	    	}
	    	csvOutput.write("END");
			csvOutput.close();
			log.debug(" After writing to CSV ");
		}
		catch (IOException e) {
			e.printStackTrace();
		}
		totalDataList[0] = successList;
		totalDataList[1] = failureList;
		return totalDataList;
	}
	
	private String convertToDateFormat(java.sql.Date sqlDate) {
		SimpleDateFormat simpleFormat = new SimpleDateFormat("yyyyMMdd");
		String convertedDate = simpleFormat.format(sqlDate);
		return convertedDate;
	}
	
	private String getDateDiff(TBRegistrationEventNotification tbRegEvent,String regnDays) {
	    log.debug("Billing Account= "+tbRegEvent.getAccountNumber());
	  	String status=null;
		long createDateMilliSec=0L;
		long enrolDateMilliSec=0L;
		long successDays = 9999999;
		long failureDays = 9999999;
		long paperDays = 9999999;
		long regDays =0L;
		java.sql.Date currDT=new java.sql.Date(System.currentTimeMillis());
		if(regnDays!=null) {
			regDays=Long.parseLong(regnDays);			  
		}
		if(tbRegEvent.getCreatedDate() !=null) {
			createDateMilliSec = tbRegEvent.getCreatedDate().getTime();
		}
		if(tbRegEvent.getEnrolDate()!=null) {
			enrolDateMilliSec = tbRegEvent.getEnrolDate().getTime();
		}
		if(tbRegEvent.getCreatedDate() !=null && tbRegEvent.getEnrolDate() !=null) {
			successDays =(enrolDateMilliSec - createDateMilliSec) / (24 * 60 * 60 * 1000);
		}
		if(tbRegEvent.getCreatedDate() != null) {
			failureDays =(System.currentTimeMillis() - createDateMilliSec) / (24 * 60 * 60 * 1000);
		}
		if(tbRegEvent.getPaperStatusDate() != null) {
			paperDays = (System.currentTimeMillis() - tbRegEvent.getPaperStatusDate().getTime()) / (24 * 60 * 60 * 1000);
		}
		log.debug("*** SuccessDate --> (CreatedDate - EnrolDate) *** "+successDays);
		log.debug("*** FailureDate --> (CreatedDate - EnrolDate) *** "+failureDays);
		log.debug("*** PaperStatusDate --> (SYSDATE - PaperStatusDate) *** "+paperDays);
		if(successDays <= regDays && paperDays >= 0) {
			log.debug("*** Success For (CreatedDate - EnrolDate) < Regn-X-Days && Paper Status Date < current Date Condition *** ");
			status="Success";
		} else if(successDays <= regDays && paperDays < 0){
			log.debug("*** Failed for Paper Status Date > current date Condition *** ");
			status="Failed";
		} else if(successDays > regDays) {
			log.debug("*** Failed for (CreatedDate - EnrolDate) > Regn-X-Days Condition *** ");
			status="Failed";
		} else if(failureDays > regDays && tbRegEvent.getEnrolDate() == null) {
			log.debug("*** Failed for (SYSDATE - CreatedDate) > Regn-X-Days && Enroldateis null Condition *** ");
			status="Failed";
		}
		return status;
	}
	
	private String convertToDateFormat() {
		Date currDt=new Date();
		SimpleDateFormat simpleFormat = new SimpleDateFormat("yyyyMMdd");
		String convertedDate = simpleFormat.format(currDt);
		log.debug("*** After convertedToDate Format *** "+convertedDate);
		return convertedDate;
	}
}
