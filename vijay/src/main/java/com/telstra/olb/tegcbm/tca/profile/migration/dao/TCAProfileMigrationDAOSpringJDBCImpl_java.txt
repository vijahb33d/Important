/*
 * Created on 2/09/2011
 *
 * TODO To change the template for this generated file go to
 * Window - Preferences - Java - Code Style - Code Templates
 */
package com.telstra.olb.tegcbm.tca.profile.migration.dao;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.ResultSetExtractor;
import org.springframework.jdbc.core.support.JdbcDaoSupport;

import com.telstra.olb.tegcbm.tca.profile.migration.TCAUserProfile;

/**
 * 
 * TODO To change the template for this generated type comment go to Window -
 * Preferences - Java - Code Style - Code Templates
 */
public class TCAProfileMigrationDAOSpringJDBCImpl extends JdbcDaoSupport implements TCAProfileMigrationDAO {

    private static final String SELECT_SQL = "SELECT ECSID,ATTRIBUTE_ID, VALUE FROM PDB_DBA.PDB_ECS_USER_VALUES_T WHERE ECSID IN ( :ECSIDS ) AND ATTRIBUTE_ID IN ( :ATTRIBUTELIST )";

    private static final String AUTH_SELECT_SQL = "SELECT DISTINCT(ECS_ID) FROM PDB_DBA.PDB_AUTH_T WHERE ECS_ID LIKE 'E:ECSID%'";

    private static final String DELIMITER = ",";

    private static final String SINGLE_QUOTE = "'";

    private final Log log = LogFactory.getLog(this.getClass());

    /**
     * Comment for <code>attribs</code> Denotes the attributes to be included
     * in the User profile.
     */
    private String attribs;

    /**
     * Method retrives the necessary profile information from the datbase for
     * the given CIDN.
     */
    public Collection retrieveParamsForCIDN(final String cidn) throws DataAccessException {
        log.debug("retrieveParamsForCIDN start for CIDN: " + cidn);
        List activeUsers = getActiveUsersForCIDN(cidn);
        if (activeUsers != null && !activeUsers.isEmpty()) {
            String SELECT_SQL = generateSQL(activeUsers);
            log.debug(SELECT_SQL);
            try {
                return (Collection) getJdbcTemplate().query(SELECT_SQL, new ResultSetExtractor() {

                    public Object extractData(ResultSet rs) throws SQLException, DataAccessException {
                        Map profiles = new HashMap();
                        while (rs.next()) {
                            String ecsid = rs.getString("ECSID");
                            String attributeId = rs.getString("ATTRIBUTE_ID");
                            String value = rs.getString("VALUE");

                            TCAUserProfile profile = (TCAUserProfile) profiles.get(ecsid);
                            if (profile == null) {
                                profile = new TCAUserProfile();
                                profile.setCidn(cidn);
                                profile.setEcsid(ecsid);
                                profile.setAttribs(Arrays.asList(getAttributes()));
                                profiles.put(ecsid, profile);
                            }
                            profile.setAttribute(attributeId, value);
                        }
                        log.info("Profiles retrieved for CIDN: " + cidn);
                        return profiles.values();
                    }
                });
            } catch (DataAccessException e) {
                throw e;
            } finally {
                log.debug("retrieveParamsForCIDN end for CIDN: " + cidn);
            }
        } else {
            log.info(cidn + " is Invalid or There is no Active Users");
            log.debug("retrieveParamsForCIDN end for CIDN: " + cidn);
            return null;
        }
    }

    /**
     * Method retrieves the list of active users for a CIDN from the Profile
     * database.
     * 
     * @param cidn
     * @return
     */
    private List getActiveUsersForCIDN(String cidn) throws DataAccessException {
        log.debug("getActiveUsersForCIDN start for CIDN: " + cidn);
        String sql = StringUtils.replaceOnce(AUTH_SELECT_SQL, ":ECSID", cidn);
        log.debug(sql);
        List activeUsers = getJdbcTemplate().queryForList(sql, String.class);
        log.info(activeUsers);
        log.debug("getActiveUsersForCIDN end for CIDN: " + cidn);
        return activeUsers;
    }

    /**
     * Method generates SQL to be executed to retrieve the Profile information
     * from database.
     * 
     * @param activeUsers
     * @return
     */
    private String generateSQL(List activeUsers) {
        String sql = StringUtils.replaceOnce(SELECT_SQL, ":ECSIDS", getECSIDList(activeUsers));
        sql = StringUtils.replaceOnce(sql, ":ATTRIBUTELIST", getAttributesList());
        return sql.toString();
    }

    private String getAttributesList() {
        StringBuffer buffer = new StringBuffer();
        String[] attributes = getAttributes();
        for (int index = 0; index < attributes.length; index++) {
            buffer.append(SINGLE_QUOTE + attributes[index] + SINGLE_QUOTE);
            if (index != attributes.length - 1) {
                buffer.append(DELIMITER);
            }
        }
        return buffer.toString();
    }

    /**
     * Method prepares the list of ECSIDs in a comma separated format, to
     * include them in the SQL.
     * 
     * @return
     */
    private String getECSIDList(List activeUsers) {
        StringBuffer ecsList = new StringBuffer();
        int count = 1;
        for (Iterator iter = activeUsers.iterator(); iter.hasNext();) {
            ecsList.append(SINGLE_QUOTE + (String) iter.next() + SINGLE_QUOTE);
            if (count != activeUsers.size()) {
                ecsList.append(DELIMITER);
            }
            count++;
        }
        return ecsList.toString();
    }

    /**
     * Method splits the necessary attributes(from a String to a String array)
     * to be included as part of the profile.
     * 
     * @return
     */
    private final String[] getAttributes() {
        return getAttribs().split(DELIMITER);
    }

    /**
     * @return Returns the attribs.
     */
    public String getAttribs() {
        return attribs;
    }

    /**
     * @param attribs
     *            The attribs to set.
     */
    public void setAttribs(String attribs) {
        this.attribs = attribs;
    }
}